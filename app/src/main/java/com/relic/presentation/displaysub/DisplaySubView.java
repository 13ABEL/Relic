package com.relic.presentation.displaysub;

import android.arch.lifecycle.Observer;
import android.arch.lifecycle.ViewModelProviders;
import android.content.Intent;
import android.databinding.DataBindingUtil;
import android.net.Uri;
import android.os.Bundle;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.design.chip.Chip;
import android.support.v4.app.Fragment;
import android.support.v4.widget.SwipeRefreshLayout;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import android.widget.Toast;

import com.relic.R;
import com.relic.data.PostRepositoryImpl;
import com.relic.data.models.PostModel;
import com.relic.data.models.SubredditModel;
import com.relic.databinding.DisplaySubBinding;
import com.relic.presentation.DisplayImageFragment;
import com.relic.presentation.adapter.ImageOnClick;
import com.relic.presentation.adapter.PostItemAdapter;
import com.relic.presentation.adapter.PostItemOnclick;
import com.relic.presentation.displaypost.DisplayPostView;
import com.relic.presentation.displaysubinfo.DisplaySubInfoView;

import java.util.List;


public class DisplaySubView extends Fragment {
  private final String TAG = "DISPLAYSUB_VIEW";
  private final String SCROLL_POSITION = "POSITION";
  protected DisplaySubContract.ViewModel displaySubVM;

  private DisplaySubBinding displaySubBinding;
  private PostItemAdapter postAdapter;
  private SwipeRefreshLayout swipeRefresh;
  private String subName;

  @Override
  public void onCreate(@Nullable Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);

    if (this.getArguments() != null) {
      // parse the SubredditModel from the arguments
      SubredditModel subModel = this.getArguments().getParcelable("SubredditModel");

      if (subModel != null) {
        subName = subModel.getSubName();
        // get the viewmodel and inject the dependencies into it
        displaySubVM = ViewModelProviders.of(this).get(DisplaySubVM.class);

        // initialization occurs for vm only when the view is first created
        displaySubVM.init(subModel, new PostRepositoryImpl(this.getContext()));
      }
    } else {
      Toast.makeText(this.getContext(), "There was an issue loading this sub", Toast.LENGTH_SHORT).show();
    }
  }


  @Nullable
  @Override
  public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
    // initialize the databinding for the layout
    displaySubBinding = DataBindingUtil.inflate(inflater, R.layout.display_sub, container, false);

    // initialize the post item adapter and attach it to the autogenerated view class
    postAdapter = new PostItemAdapter(new OnClick(), new OnClickImage());
    displaySubBinding.displayPostsRecyclerview.setAdapter(postAdapter);
    // initialize the reference to the swiperefresh layout
    swipeRefresh = displaySubBinding.getRoot().findViewById(R.id.display_posts_swipeRefreshLayout);

    attachScrollListeners();
    initializeActionbar();
    return displaySubBinding.getRoot();
  }


  @Override
  public void onActivityCreated(@Nullable Bundle savedInstanceState) {
    super.onActivityCreated(savedInstanceState);

    if (displaySubVM == null) {
      // fetch the viewmodel if the fragment survives a reconfiguration change
      displaySubVM = ViewModelProviders.of(this).get(DisplaySubVM.class);
    }

    subscribeToPosts();

    // recreate saved the saved instance instance
    if (savedInstanceState != null) {
      Integer position = savedInstanceState.getInt(SCROLL_POSITION);
      Log.d(TAG, "Previous position = " + position);
      // scroll to the previous position before reconfiguration change
      displaySubBinding.displayPostsRecyclerview.smoothScrollToPosition(position);
    }
  }


  private void subscribeToPosts() {
    // observe the livedata list contained in the viewmodel
    displaySubVM.getPosts().observe(this, new Observer<List<PostModel>>() {
      @Override
      public void onChanged(@Nullable List<PostModel> postModels) {
        if (postModels != null) {
          // tells VM to retrieve more posts if there are no posts currently stored for this sub
          if (postModels.size() == 0) {
            displaySubVM.retrieveMorePosts(true);
            Log.d(TAG, "Requesting more posts from vm");
          } else {
            swipeRefresh.setRefreshing(false);
            // update the view whenever the livedata changes
            Log.d(TAG, "SIZE " + postModels.size());
            postAdapter.setPostList(postModels);
          }
          displaySubBinding.executePendingBindings();
        }
      }
    });
  }


  /**
   * Attach the event listeners for scrolling within the recyclerview and swiperefreshlayout
   */
  public void attachScrollListeners() {
    // attach listener for checking if the user has scrolled to the bottom of the recyclerview
    displaySubBinding.displayPostsRecyclerview.addOnScrollListener(new RecyclerView.OnScrollListener() {
      @Override
      public void onScrollStateChanged(RecyclerView recyclerView, int newState) {
        super.onScrollStateChanged(recyclerView, newState);

        // checks if the recyclerview can no longer scroll downwards
        if (!recyclerView.canScrollVertically(1)) {
          // fetch the next post listing
          displaySubVM.retrieveMorePosts(false);
          Log.d(TAG, "Bottom reached, more posts retrieved");
        }
      }
    });

    // Attach listener for refreshing the sub
    swipeRefresh.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {
      @Override
      public void onRefresh() {
        // empties current items to show that it's being refreshed
        postAdapter.resetPostList();

        // refresh the listing for this sub
        displaySubVM.retrieveMorePosts(true);
        Log.d(TAG, "Top pulled, posts refreshed");
      }
    });
  }


  /**
   * Initializes actionbar menus and on clicks
   */
  private void initializeActionbar() {
    // need to obtain a reference to appcompatactivity to use the support action bar
    AppCompatActivity appCompatActivity = (AppCompatActivity) getActivity();
    if (appCompatActivity != null) {
      // sets title and tells user default sorting
      Chip title = getActivity().findViewById(R.id.my_toolbar_title);
      TextView subTitle = getActivity().findViewById(R.id.my_toolbar_subtitle);

      title.setChipText(subName);
      subTitle.setText("Popular");

      title.setOnClickListener(new View.OnClickListener() {
        @Override
        public void onClick(View view) {
          Toast.makeText(getContext(), "Title Clicked", Toast.LENGTH_SHORT).show();


          DisplaySubInfoView displaySubInfoView = new DisplaySubInfoView();
          Bundle bundle = new Bundle();
          bundle.putString("name", subName);

          displaySubInfoView.setArguments(bundle);
          displaySubInfoView.showNow(getFragmentManager(), TAG);
        }
      });
    }
  }


  /**
   * Onclick class with method for the view to hook onto
   */
  class OnClick implements PostItemOnclick {
    public void onClick(String postId, String subreddit) {
      // create a new bundle for the post id
      Bundle bundle = new Bundle();
      bundle.putString("full_name", postId);
      bundle.putString("subreddit", subreddit);

      DisplayPostView postFrag = new DisplayPostView();
      postFrag.setArguments(bundle);

      getActivity().getSupportFragmentManager().beginTransaction()
          .replace(R.id.main_content_frame, postFrag).addToBackStack(TAG).commit();
      }
  }


  /**
   * Onclick class for imageview onclick
   */
  class OnClickImage implements ImageOnClick {
    @Override
    public void onClick(String url) {
      // Parses the url type and routes it appropriately
      String urlEnding = url.substring(url.length() - 3);
      if (urlEnding.equals("jpg") || urlEnding.equals("png") || urlEnding.equals("gif")) {
        // create a new bundle for to pass the image url along
        Bundle bundle = new Bundle();
        bundle.putString("image_url", url);

        DisplayImageFragment displayImageFragment = new DisplayImageFragment();
        displayImageFragment.setArguments(bundle);

        // replace the current fragment with the new display image frag and add it to the frag stack
        getActivity().getSupportFragmentManager().beginTransaction()
            .add(R.id.main_content_frame, displayImageFragment).addToBackStack(TAG).commit();
      } else {
        // open the url in the browser
        Intent openInBrowser = new Intent(Intent.ACTION_VIEW, Uri.parse(url));
        startActivity(openInBrowser);
      }
    }
  }


  @Override
  public void onSaveInstanceState(@NonNull Bundle outState) {
    super.onSaveInstanceState(outState);

    LinearLayoutManager manager = (LinearLayoutManager) displaySubBinding.displayPostsRecyclerview.getLayoutManager();
    // put the first visible item position into the bundle to allow us to get back to it
    outState.putInt(SCROLL_POSITION, manager.findFirstCompletelyVisibleItemPosition());
    Log.d(TAG, "First position = " + manager.findFirstCompletelyVisibleItemPosition());
  }


  @Override
  public void onDestroy() {
    super.onDestroy();
    // set title back to app name
    ((Chip) getActivity().findViewById(R.id.my_toolbar_title)).setChipTextResource(R.string.app_name);
    ((TextView) getActivity().findViewById(R.id.my_toolbar_subtitle)).setText("");
  }



}
